
###################################################################################################
####################################### ↓ 配置 ↓ ###################################################
# 联盟名称
config-union: &union union

######################################## orderer ###################################################
# orderer组织名称:
config-ordererOrg: &ordererOrg ordererorg
# orderer组织mspid:
config-ordererMsp: &ordererMsp ordererorg
# orderer组织msp目录:
config-ordererMspPath: &ordererMspPath ./crypto-config/ordererOrganizations/ordererorg.luode.com/msp
# orderer组织读策略
config-ordererPoliciesReaders: &ordererPoliciesReaders "OR('ordererorg.member')"
# orderer组织写策略
config-ordererPoliciesWriters: &ordererPoliciesWriters "OR('ordererorg.member')"
# orderer组织管理员策略
config-ordererPoliciesAdmins: &ordererPoliciesAdmins "OR('ordererorg.admin')"
# orderer节点列表
config-ordererAddresses: &ordererAddresses [order0.ordererorg.luode.com:11001,order2.ordererorg.luode.com:11003,order1.ordererorg.luode.com:11002]
# orderer共识列表
config-ordererEtcdRaft: &ordererEtcdRaft [{"Host":"order0.ordererorg.luode.com","Port":"11001","ClientTLSCert":"./crypto-config/ordererOrganizations/ordererorg.luode.com/orderers/order0.ordererorg.luode.com/tls/server.crt","ServerTLSCert":"./crypto-config/ordererOrganizations/ordererorg.luode.com/orderers/order0.ordererorg.luode.com/tls/server.crt"},{"Host":"order2.ordererorg.luode.com","Port":"11003","ClientTLSCert":"./crypto-config/ordererOrganizations/ordererorg.luode.com/orderers/order2.ordererorg.luode.com/tls/server.crt","ServerTLSCert":"./crypto-config/ordererOrganizations/ordererorg.luode.com/orderers/order2.ordererorg.luode.com/tls/server.crt"},{"Host":"order1.ordererorg.luode.com","Port":"11002","ClientTLSCert":"./crypto-config/ordererOrganizations/ordererorg.luode.com/orderers/order1.ordererorg.luode.com/tls/server.crt","ServerTLSCert":"./crypto-config/ordererOrganizations/ordererorg.luode.com/orderers/order1.ordererorg.luode.com/tls/server.crt"}]
####################################### ↑ 配置 ↑ ###################################################
###################################################################################################

###################################################################################################
############################# 不熟悉请不要随便修改下面的配置 ###########################################
###################################################################################################
# 组织配置：定义了不同的组织标志, 这些组织将在 Profiles 部分(最后面)被引用。
Organizations:
    # 定义一个排序组织
    # 名称=ordererorg、id=ordererorg(也就是msp名称)
    # MSPDir=组织的MSP证书路径, 之后我们将组织下的成员加入这个通道的时候, 必须结果msp的验证, 不属于组织的节点将不能加入通道
    - &OrdererConfig
        Name: *ordererOrg
        ID: *ordererMsp
        MSPDir: *ordererMspPath
        # 定义的组织策略, 也就是权限, 包括Readers读、Writers写等
        Policies:
            # 控制谁可以 读取 通道中的交易数据
            # Signature=签名, 组织下的成员member必须经过 签名证书 通过身份验证才能被认为是有效
            Readers:
                Type: Signature
                Rule: *ordererPoliciesReaders
            # 控制谁可以 写入 通道的交易数据, type、Rule同上
            Writers:
                Type: Signature
                Rule: *ordererPoliciesWriters
            # 控制敏感操作，如创建通道、更新通道等
            # Signature=签名, Rule=只有admin管理员通过签名验证才可以创建通道、更新通道
            Admins:
                Type: Signature
                Rule: *ordererPoliciesAdmins

# 定义版本的兼容情况, 会在Peer、Orderer、Channel处使用
Capabilities:
    # Channel配置同时应用于 orderer 节点与 peer 节点，并且必须被两种节点同时支持
    # 将该配置项设置为ture表明要求节点具备该能力,false则不要求该节点具备该能力
    # 要求Channel上的所有Orderer节点和Peer节点达到v2.0.0或更高版本
    Channel: &ChannelCapabilities
        V2_0: true

    # Orderer功能仅适用于 orderer 节点，可以安全地操作，而无需担心升级peers
    Orderer: &OrdererCapabilities
        V2_0: true

    # 应用程序功能仅适用于 Peer 网络，可以安全地操作，而无需担心升级或更新orderers
    Application: &ApplicationCapabilities
        V2_0: true

# Peer配置：指定 Peer 节点的一些基本属性和行为, 例如：权限策略等，　这些将应用于所有的通道和链码
Application: &ApplicationDefaults
    # Organizations 组织属性: 组织配置,引用Org1、Org2组织, AnchorPeers 锚节点配置(通常选择组织的第一个节点)
    
    Organizations:
        - Name: org1
          ID: org1
          MSPDir: ./crypto-config/peerOrganizations/org1.luode.com/msp
          Policies:
            Readers:
                Type: Signature
                Rule: OR('org1.member')
            Writers:
                Type: Signature
                Rule: OR('org1.member')
            Admins:
                Type: Signature
                Rule: OR('org1.admin')
            Endorsement:
                Type: Signature
                Rule: OR('org1.peer')
          AnchorPeers:
            - Host: peer0.org1.luode.com
              Port: 11005
        - Name: org0
          ID: org0
          MSPDir: ./crypto-config/peerOrganizations/org0.luode.com/msp
          Policies:
            Readers:
                Type: Signature
                Rule: OR('org0.member')
            Writers:
                Type: Signature
                Rule: OR('org0.member')
            Admins:
                Type: Signature
                Rule: OR('org0.admin')
            Endorsement:
                Type: Signature
                Rule: OR('org0.peer')
          AnchorPeers:
            - Host: peer0.org0.luode.com
              Port: 11004


    # ImplicitMeta：支持多个子策略，并且只有满足所有子策略的签名才能通过验证
    # ANY Readers: 任何拥有 Readers 角色都可以读取通道和链码的数据
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"

        # LifecycleEndorsement 策略用于指定链码的生命周期操作（例如安装、批准和提交）的策略
        # ANY Endorsement: 任何拥有 Endorsement 背书角色都可以对链码的生命周期操作进行安装、批准和提交
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        # 背书策略：任何 Endorsement 背书节点都可以执行并且验证交易输出
        Endorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"

    # 版本的兼容情况, 满足Capabilities.Application的配置即可
    Capabilities:
        <<: *ApplicationCapabilities


# Orderer配置：指定默认的排序服务配置, 例如权限策略、批处理大小、超时时间等
Orderer: &OrdererDefaults
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: Signature
            Rule: *ordererPoliciesAdmins
        # 指定排序服务对区块的验证策略, 任何拥有 Writers 写角色的都可以对区块进行验证
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

    # 区块打包的最大包含交易数（orderer端切分区块的参数）, 这块扩展无限大, 主要控制时间打包区块
    BatchSize:
        PreferredMaxBytes: 1 MB
        AbsoluteMaxBytes: 1 MB
        MaxMessageCount: 500
    # 区块打包的最大超时时间 (到了该时间就打包区块), 控制为0.5s打包, 存证数据至少需要0.5s后才会进行存证
    BatchTimeout: 1s
    
    # 表示Orderer允许的最大通道数， 默认0表示没有最大通道数
    MaxChannels: 0
    # 版本兼容
    Capabilities:
        <<: *OrdererCapabilities

    # 排序节点的共识机制, 使用 etcd 作为共识存储后端, 还有单机的solo和传统的Kafka机制
    # etcdraft：在机制下最终只有一个Orderer节点进行排序，所以其性能非常的高，并不需要多个节点之间同步状态的拜占庭问题。
    OrdererType: etcdraft
    # 定义 etcdRaft 排序配置, 例如 etcd 共识节点地址地址(至少3个)、TLS 配置、共识算法等
    # 如果有多个或者很多个排序节点, 需要他们参与共识机制，那么需要在配置文件中显示地配置每个排序节点的地址和 TLS 配置
    EtcdRaft:
        Consenters: *ordererEtcdRaft
        # 选举领导者leader节点配置
        Options:
            TickInterval: 500ms
            ElectionTick: 10
            HeartbeatTick: 1
            MaxInflightBlocks: 5
            SnapshotIntervalSize: 16 MB

    # orderer节点, 必须配置, 否则peer无法与orderer通信
    Addresses: *ordererAddresses


# Channel通道配置: 指定通道的一些基本属性，例如权限策略等
Channel: &ChannelDefaults
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"
    # 版本的兼容情况, 满足Capabilities.Channel的配置即可
    Capabilities:
        <<: *ChannelCapabilities

#配置入口: 命令选择一个配置模板执行即可
Profiles:
    # 模板:
    OrgsChannel:
        # 通道所关联的联盟名称，Fabric无系统通道模式，不需要联盟
        Consortium: *union

        # 继承ChannelDefaults 通道默认属性到该位置, 也就是Policies、Capabilities属性
        <<: *ChannelDefaults

        # peer节点配置, 包括继承的默认配置, 自定义的组织配置 和 自定义组织的AnchorPeers锚节点
        Application:
            # 继承 ApplicationDefaults 默认配置, 包括Policies、Capabilities属性
            <<: *ApplicationDefaults

        # Orderer排序节点配置, 包括默认的配置, 自定义组织配置 和 OrdererType共识机制、共识配置
        Orderer:
            # 继承 OrdererDefaults 默认配置, 包括Policies、OrdererType、Capabilities等属性
            <<: *OrdererDefaults

            # [自定义补充]
            # Organizations 组织属性: 组织配置,引用OrdererOrg组织, 组织在 Organizations 处配置
            Organizations:
                -   <<: *OrdererConfig