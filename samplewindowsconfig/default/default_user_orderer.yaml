# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

############################# ↓ orderer配置 ↓  ###############################################
orderer:
  address: orderer0.orderer.com:7051
  tls:
    enabled: true
    clientAuthRequired: true
    rootcert:
      file: crypto-config/ordererOrganizations/orderer.com/orderers/orderer0.orderer.com/tls/ca.crt
    cert:
      file: crypto-config/ordererOrganizations/orderer.com/orderers/orderer0.orderer.com/tls/server.crt
    key:
      file: crypto-config/ordererOrganizations/orderer.com/orderers/orderer0.orderer.com/tls/server.key
############################# ↓ peer配置 ↓  ##################################################

config-data:  &data data/peer0.org.peer.com

config-networkId:  &networkId peer0.org.peer.com
config-node:  &node peer0.org.peer.com:7150
config-listenAddress:  &listenAddress 0.0.0.0:7150
config-chaincodeListenAddress:  &chaincodeListenAddress 0.0.0.0:7250
config-nodeListen:  &nodeListen 127.0.0.1:7350
config-chaincodeAddress:  &chaincodeAddress 127.0.0.1:7250

config-mspId:  &mspId OrdererMSP
config-mspPath:  &mspPath crypto-config/ordererOrganizations/orderer.com/users/Admin@orderer.com/msp

config-tlsCertRoot:  &tlsCertRoot crypto-config/ordererOrganizations/orderer.com/users/Admin@orderer.com/tls/ca.crt
config-tlsCertServer:  &tlsCertServer crypto-config/ordererOrganizations/orderer.com/users/Admin@orderer.com/tls/server.crt
config-tlsCertServerKey:  &tlsCertServerKey crypto-config/ordererOrganizations/orderer.com/users/Admin@orderer.com/tls/server.key

config-couchdb: &ledgerdb goleveldb
config-couchdb-address: &ledgerdbAddress couchdb.peer0.org.peer.com:5984
config-couchdb-username: &ledgerdbusername admin
config-couchdb-password: &ledgerdbpassword adminpw
############################# ↑ 配置 ↑  ##################################################

###############################################################################
#
#    Peer section
#
###############################################################################
peer:

  # 提供此对等实例的名称。在命名docker资源以隔离结构网络和对等方时使用它。
  id: *networkId

  # 指定用于网络逻辑分离的名称。
  # 它在命名docker资源时用于隔离fabric网络和对等方。
  networkId:

  # 此对等体将侦听的本地网络接口处的地址。
  # 默认情况下，它也会是gRPC远程连接的的地址
  listenAddress: *listenAddress

  # 此对等体用于侦听入站链码连接的端点。
  # 如果这是注释掉的，则将默认侦听地址选择为具有端口7052的对等地址 (见下文)
  chaincodeListenAddress: *chaincodeListenAddress

  # 此对等体的链码用于连接到对等体的端点。
  # 如果不指定，则选择 chaincodeListenAddress 地址。
  # 如果未指定 chaincodeListenAddress ，则从对等地址中选择地址 (见下文)。
  # 如果指定的对等地址无效，则它将回退到自动检测到的IP (本地IP)，而不管对等地址自动检测值如何。
  chaincodeAddress: *chaincodeAddress

  # 其他对等体和客户端应用于与对等体通信的地址。
  # 它必须格式化为 [host | ipaddr]:port。
  # 当被CLI使用时，它表示目标对等端点。
  address: *node

  # 对等方是否应以编程方式确定其地址
  # 这种情况对docker容器很有用。
  # 设置为true时，将覆盖对等 address 地址(强制使用本机ip, 自定义ip的将无效)。
  addressAutoDetect: false

  # 对等方的网关服务器的设置。
  gateway:
    # 是否为此对等方启用网关。
    enabled: true
    # endorsementTimeout 是网关在向客户端返回超时错误之前等待来自其他认可对等体的响应的持续时间。
    endorsementTimeout: 30s
    # broadcastTimeout 是网关在向客户端返回超时错误之前等待来自排序节点的响应的持续时间。
    broadcastTimeout: 30s
    # dialTimeout 是网关等待与其他网络节点的连接的持续时间。
    dialTimeout: 2m


  # 对等服务器和客户端的Keepalive存活设置
  keepalive:
    # Interval 是持续时间，在该持续时间之后，如果服务器没有看到来自客户端的任何活动，它将对客户端执行pings以查看其是否处于活动状态
    interval: 7200s
    # Timeout 是服务器在关闭连接之前发送ping之后等待客户端响应的持续时间
    timeout: 20s
    # MinInterval 是客户端之间的最短允许时间。
    # 如果客户端更频繁地发送pings，则对等服务器将断开它们的连接
    minInterval: 60s
    # Client 用于与其他对等节点通信的keepalive设置
    client:
      # Interval 是对等节点之间的时间。这必须大于或等于对等节点指定的 minInterval
      interval: 60s
      # Timeout 是客户端在关闭连接之前等待来自对等节点的响应的持续时间
      timeout: 20s
    # DeliveryClient 与排序节点通信的keepalive设置。
    deliveryClient:
      # Interval 是对节点进行排序的pings之间的时间。这必须大于或等于排序节点指定的 minInterval。
      interval: 60s
      # Timeout 是客户端在关闭连接之前等待来自排序节点的响应的持续时间
      timeout: 20s


  # Gossip 相关配置
  gossip:
    # Bootstrap 设置为初始化gossip.
    # 这是该对等体在启动时接触到的其他对等体的列表。
    # 重要提示: 此处的端点必须是同一组织中对等体的端点，
    # 因为对等方会拒绝连接到这些端点，除非它们与对等方位于同一组织中。
    bootstrap: *node

    # 这将覆盖peer向其组织中的peer发布的节点。
    # 对于外部组织中的同行，请参阅 “外部端点”
    endpoint:

    # 非阻塞提交模式
    # nonBlockingCommitMode: false

    # NOTE: orgLeader 和 useLeaderElection参数是互斥的.
    # 将两者都设置为true将导致对等体终止，因为这是未定义的状态。
    # 如果对等节点配置 useLeaderElection = false，
    # 确保组织中至少有1个对等方的orgLeader设置为true。

    # 定义何时对等方将初始化动态算法进行 “领导者” 选择，
    # 其中leader是与订购服务建立连接并使用交付协议从订购服务中提取分类帐块的对等方。
    # useLeaderElection相当于从节点的开关, useLeaderElection=true表示为从节点, 参与选举
    useLeaderElection: false

    # 静态定义peer成为组织 “领导者”，
    # 这意味着当前对等方将保持与订购服务的连接，并在其自己的组织中的对等方中传播块。
    # 可以将组织中的多个对等体或所有对等体配置为组织领导者，
    # 所以他们都直接从订购服务拉块。
    orgLeader: true

    # 成员资格跟踪器轮询的时间间隔
    membershipTrackerInterval: 5s

    # 存储在内存中的最大块数
    maxBlockCountToStore: 10
    # 连续推送消息之间的最大时间 (单位: 毫秒)
    maxPropagationBurstLatency: 10ms
    # 在触发推送到远程对等方之前存储的最大消息数
    maxPropagationBurstSize: 10
    # 消息被推送到远程对等方的次数
    propagateIterations: 1
    # 选择将消息推送到的对等体数
    propagatePeerNum: 3
    # 确定拉动阶段的频率 (单位: 秒) 必须大于 digestWaitTime + responseWaitTime
    pullInterval: 4s
    # 要从中拉取的对等体的数量
    pullPeerNum: 3
    # 确定从对等体拉取状态信息消息的频率 (单位: 秒)
    requestStateInfoInterval: 4s
    # 确定向对等体推送状态信息消息的频率 (单位: 秒)
    publishStateInfoInterval: 4s
    # Maximum time a stateInfo message is kept until expired
    stateInfoRetentionInterval:
    # 启动证书的时间包括在Alive消息中 (单位: 秒)
    publishCertPeriod: 10s
    # 我们是否应该跳过验证块消息 (当前未使用)
    skipBlockVerification: false
    # 拨号超时 (单位: 秒)
    dialTimeout: 3s
    # 连接超时 (单位: 秒)
    connTimeout: 2s
    # 收到消息的缓冲区大小
    recvBuffSize: 20
    # 发送消息的缓冲区大小
    sendBuffSize: 200
    # 在pull引擎处理传入摘要之前等待的时间。
    # 应略小于 requestWaitTime
    digestWaitTime: 1s
    # 拉取引擎移除传入nonce之前的等待时间 (单位: 毫秒)
    # 应该比 digestWaitTime 稍大
    requestWaitTime: 1500ms
    # 是在pull拉动引擎结束拉动之前等待的时间。
    responseWaitTime: 2s
    # Alive检查间隔 (单位: 秒)
    aliveTimeInterval: 5s
    # 活动过期超时 (单位: 秒)
    aliveExpirationTimeout: 25s
    # 重新连接间隔 (单位: 秒)
    reconnectInterval: 25s
    # 尝试连接到对等体的最大次数
    maxConnectionAttempts: 120
    # 是有效消息TTL的过期因子
    msgExpirationFactor: 20
    # 这是发布到组织外部的对等方的节点。
    # 如果未设置此值，则其他组织将不会知道该对等体。
    externalEndpoint: *node
    # Leader选举服务配置
    election:
      # 领导选举启动时peer等待稳定会员的最长时间 (单位: 秒)
      startupGracePeriod: 15s
      # gossip会员抽样检查其稳定性 (单位: 秒)
      membershipSampleInterval: 1s
      # 从上次声明消息到peer决定执行leader选举的时间 (单位: 秒)
      leaderAliveThreshold: 10s
      # peer发送propose提案消息并声明自己为leader (发送声明消息) 之间的时间 (单位: 秒)
      leaderElectionDuration: 5s

    # 私有数据
    pvtData:
      # 确定在没有私有数据的情况下提交该块之前，尝试从对等方提取与给定块相对应的私有数据的最大持续时间
      pullRetryThreshold: 60s
      # 定义提交时当前分类帐的高度与驻留在保证不会被清除的临时存储中的私有数据之间的最大差异。
      transientstoreMaxBlockRetention: 1000
      # pushAckTimeout 是在认可时间等待每个对等体在私有数据推送时确认的最长时间。
      pushAckTimeout: 3s
      # 要活动的块拉取余量，用作缓冲区以防止对等方尝试从对等方拉取即将在接下来的N个块中清除的私有数据。
      btlPullMargin: 10
      # 和解的过程是在一个无休止的循环中完成的，
      # 而在每次迭代中，调和器尝试从其他对等体中提取具有最大批大小限制的最近丢失的块。
      # reconcileBatchSize确定将在单次迭代中协调的丢失私有数据的最大批处理大小。
      reconcileBatchSize: 10
      # reconcileSleepInterval 确定协调程序从交互结束到下一次协调迭代开始的睡眠时间。
      reconcileSleepInterval: 1m
      # reconciliationEnabled 是指示是否启用私有数据协调的标志。
      reconciliationEnabled: true
      # 指示是否需要在提交期间跳过从其他对等方拉取无效事务的私有数据，并且仅通过reconciler拉取。
      skipPullingInvalidTransactionsDuringCommit: false
      # implicitCollectionDisseminationPolicy 指定对等方自己的隐式集合的传播策略。
      # 当对等方认可写入其自己的隐式集合的提案时，低于值会覆盖用于传播私有数据的默认值。
      # 请注意，它适用于对等体已加入的所有通道。这意味着requiredPeerCount必须小于对等点数量, 不可超过maxPeerCount最大数量。
      implicitCollectionDisseminationPolicy:
        # requiredPeerCount 定义对等方必须成功连接到的最小合格对等方数
        # 在背书期间为自己的隐式收集传播私人数据。默认值为0。
        requiredPeerCount: 0
        # maxPeerCount 定义对等方将尝试的符合条件的对等方的最大数量
        # 在背书期间为自己的隐式收集传播私人数据。默认值为1。
        # 允许将 maxPeerCount 覆盖为 0，这将有效地禁用节点上的传播
        maxPeerCount: 1

    # Gossip state transfer related configuration
    state:
      # indicates whenever state transfer is enabled or not
      # default value is false, i.e. state transfer is active
      # and takes care to sync up missing blocks allowing
      # lagging peer to catch up to speed with rest network.
      # Keep in mind that when peer.gossip.useLeaderElection is true
      # and there are several peers in the organization,
      # or peer.gossip.useLeaderElection is false alongside with
      # peer.gossip.orgleader being false, the peer's ledger may lag behind
      # the rest of the peers and will never catch up due to state transfer
      # being disabled.
      enabled: false
      # checkInterval interval to check whether peer is lagging behind enough to
      # request blocks via state transfer from another peer.
      checkInterval: 10s
      # responseTimeout amount of time to wait for state transfer response from
      # other peers
      responseTimeout: 3s
      # batchSize the number of blocks to request via state transfer from another peer
      batchSize: 10
      # blockBufferSize reflects the size of the re-ordering buffer
      # which captures blocks and takes care to deliver them in order
      # down to the ledger layer. The actual buffer size is bounded between
      # 0 and 2*blockBufferSize, each channel maintains its own buffer
      blockBufferSize: 20
      # maxRetries maximum number of re-tries to ask
      # for single state transfer request
      maxRetries: 3

  # TLS设置
  tls:
    # 需要服务器端TLS
    enabled:  true
    # X.509 用于TLS服务器的证书
    cert:
      file: *tlsCertServer
    # 用于TLS服务器的私钥
    key:
      file: *tlsCertServerKey
    # rootcert.file表示可信根证书链，用于在出站连接期间验证其他节点的证书。
    # 不需要设置，但可以用来扩充TLS CA证书集
    # 可从每个通道配置的MSPs获得。
    rootcert:
      file: *tlsCertRoot

    # 入站连接需要客户端证书/相互TLS。
    # 请注意，未配置为使用证书的客户端将无法连接到对等方。
    # 如果配置为 true, 则 clientRootCAs 必须配置
    clientAuthRequired: true
    # 如果启用了相互TLS，则clientRootCAs.files包含其他根证书的列表
    # 用于验证客户端连接的证书。
    # 它增加了从每个通道的配置的msp可用的TLS CA证书集。
    # 至少，设置组织的TLS CA根证书，以便对等方可以接收加入通道请求。
    clientRootCAs:
      files: *tlsCertRoot

    # 建立客户端连接时用于TLS的私钥。
    # 如果未设置，将改为使用peer.tls.key.file
    clientKey:
      file:
    # X.509证书，用于建立客户端连接时的TLS。
    # 如果未设置，将使用peer.tls.cert.file
    clientCert:
      file:

  # 身份验证包含与身份验证客户端消息相关的配置参数
  authentication:
    # 为客户端请求消息中指定的当前服务器时间和客户端时间设置可接受的持续时间(默认为15m)。
    timewindow: 15m

  # peer将存储数据的文件系统上的路径 (例如分类帐)。这位置必须是访问控制保护，以防止意外可能损坏对等操作的修改。
  fileSystemPath: *data

  # BCCSP (区块链加密提供商): 选择哪个加密实现或要使用的库
  BCCSP:
    # 区块链加密服务提供商名称。
    Default: GM
    # SW软件加密提供程序的设置 (默认启用: SW)
    SW:
      # 完全可配置。配置成需要的hash算法, 默认支持SHA2、SHA3、GMSM3
      Hash: GMSM3
      Security: 256
      # 钥匙存储的位置
      FileKeyStore:
        # 如果为 “”，则默认为 peer.mspConfigPath + “/keystore”
        KeyStore:
    # PKCS11硬件加密提供程序的设置 (默认不启用: PKCS11)
    PKCS11:
      # PKCS11模块库的位置
      Library:
      # 令牌标签
      Label:
      # 用户PIN码
      Pin:
      Hash:
      Security:
      SoftwareVerify:
      Immutable:
      AltID:
      KeyIds:

  # 文件系统上对等体将在其中找到MSP本地配置的路径, 可以是 绝对路径/当前配置文件的相对路径
  mspConfigPath: *mspPath

  # 本地MSP的标识符
  # ----!重要!-!重要!
  # 部署者需要更改 localMspId 字符串的值。
  # 特别是，对等体的本地MSP ID的名称需要匹配每个通道中的一个msp的名称
  # 如果一个节点的本地 MSP ID 与通道中的任何组织的 MSP ID 不匹配，其他节点将无法识别该节点的消息，并且可能会拒绝该节点的请求或将其视为无效。
  localmspid: *mspId

  # CLI common client config options
  client:
    # connection timeout
    connTimeout: 3s

  # 交付/提交服务相关配置
  deliveryclient:
    # 启用通过gossip转发提交block
    blockGossipEnabled: true
    # 设置交付/提交服务可能花费在重新连接尝试上的总时间, 直到其重试逻辑放弃并返回错误。
    reconnectTotalTimeThreshold: 3600s

    # 它设置交付服务 <-> 订购服务节点连接超时
    connTimeout: 3s

    # 设置连续重试之间的传递服务最大延迟。
    reConnectBackoffThreshold: 3600s

    # 应覆盖的orderer端点地址列表, 当在通道配置中找到时。
    addressOverrides:
    #  - from:
    #    to:
    #    caCertsFile:
    #  - from:
    #    to:
    #    caCertsFile:

  # 本地MSP的类型-默认情况下，它的类型为bccsp
  # 目前版本已经固定为bccsp, 旧版本才中可使用idemix
  localMspType: bccsp

  # 仅在非生产环境中与Go分析工具一起使用。
  # 在生产中，应将其禁用 (例如，启用: false)
  profile:
    enabled:     false
    listenAddress: 0.0.0.0:6060

  # 处理程序定义自定义处理程序，这些处理程序可以过滤和改变在对等体中传递的对象，
  # 如:
  #   authFilters - 拒绝或转发来自客户的建议
  #   Decorators  - 追加或改变传递给chaincode的chaincode输入
  #   Endorsers   - 自定义签名提案响应负载及其变异
  # 有效的处理程序定义包含:
  #   - 一个名称，它是在core/handlers/library.go中定义的工厂方法名称，用于静态编译的处理程序
  #   - 可插入筛选器的共享对象二进制文件的库路径
  # Auth过滤器和装饰器按照定义的顺序链接和执行。
  # 例如:
  # authFilters:
  #   -
  #     name: FilterOne
  #     library: /opt/lib/filter.so
  #   -
  #     name: FilterTwo
  # decorators:
  #   -
  #     name: DecoratorOne
  #   -
  #     name: DecoratorTwo
  #     library: /opt/lib/decorator.so
  # 背书器被配置为映射，其密钥是被覆盖的背书系统链代码。
  # 下面是覆盖默认ESCC并且使用与默认ESCC具有相同功能的认可插件的示例。
  # 如果缺少 “library” 属性，则该名称将用作内置库中的构造函数方法，类似于auth过滤器和装饰器。
  # endorsers:
  #   escc:
  #     name: DefaultESCC
  #     library: /etc/hyperledger/fabric/plugin/escc.so
  handlers:
    authFilters: # 过滤器
      -
        name: DefaultAuth
      -
        name: ExpirationCheck    # 此筛选器检查identity x509证书过期时间
    decorators: # 装饰器
      -
        name: DefaultDecorator
    endorsers: # 背书器
      escc:
        name: DefaultEndorsement
        library:
    validators: # 验证器
      vscc:
        name: DefaultValidation
        library:

  #    library: /etc/hyperledger/fabric/plugin/escc.so
  # 将并行执行事务验证的goroutines的数量。
  # 默认情况下，peer选择机器上的cpu数量。设置此变量以覆盖该选择。
  # 注意: 覆盖此值可能会对对等方的性能产生负面影响，因此请仅在您知道自己在做什么的情况下更改此值, 添加数量可能会提升事务验证的速度
  validatorPoolSize:

  # discovery 发现服务用于客户端查询对等方的信息，
  # 例如-哪些同行peer加入了某个频道，最新的是什么通道配置
  # 最重要的是-给定一个链码和一个通道，哪些可能的同行peer集满足背书政策。
  discovery:
    enabled: true
    # 是否启用身份验证缓存。
    authCacheEnabled: true
    # 缓存的最大大小，在此之后进行清除
    authCacheMaxSize: 1000
    # 由于过度填充而清除缓存后，保留在缓存中的条目的比例 (0到1)
    authCachePurgeRetentionRatio: 0.75
    # 是否允许非管理员执行非通道范围的查询。
    # 如果为false，则意味着只有对等管理员才能执行非通道范围的查询。
    orgMembersAllowedAccess: false

  # 限制用于配置一些内部资源限制。
  limits:
    # 并发限制对每个对等体上的服务同时运行的请求的数量。
    # 目前，此选项仅适用于背书服务和交付服务。
    # 当缺少该属性或该值为0时，将禁用该服务的并发限制。
    concurrency:
      # endorserService 限制对处理链码部署、查询和调用的背书服务的并发请求，
      # 包括用户链代码和系统链代码。
      endorserService: 5000
      # deliverService 限制为块和事务事件event提供服务而注册的并发事件侦听器。
      deliverService: 5000
      # gatewayService 将并发请求限制为处理事务提交和评估的网关服务。
      gatewayService: 1500

  # 由于所有节点应保持一致，因此建议为 MaxRecvMsgSize & MaxSendMsgSize保留默认值100MB
  # GRPC服务器和客户端可以接收的最大消息大小 (字节)
  maxRecvMsgSize: 104857600
  # GRPC服务器和客户端可以发送的最大消息大小 (字节)
  maxSendMsgSize: 104857600

###############################################################################
#
#    虚拟机管理系统
#
###############################################################################
vm:

  # Endpoint 虚拟机管理系统。对于docker，通常可以是以下之一
  # unix:///var/run/docker.sock
  # http://localhost:2375
  # https://localhost:2376
  # 如果您使用外部链码构建器，并且不需要默认的Docker链码构建器，
  # 应该取消配置端点，以便不会注册对等方的Docker运行状况检查器。
  endpoint: unix:///var/run/docker.sock

  # docker vm的设置
  docker:
    tls:
      # 为docker启用/禁用TLS。
      enabled: false
      # docker守护程序的PEM编码的CA证书的路径
      ca:
        file: docker/ca.crt
      # 访问docker守护程序所需的PEM编码的TLS客户端证书的路径。
      cert:
        file: docker/tls.crt
      # 访问docker守护程序所需的PEM编码密钥的路径
      key:
        file: docker/tls.key

    # 出于调试目的启用/禁用链码容器中的标准out/err
    attachStdout: false

    # 创建docker容器的参数。
    # 可以使用ipam和dns-server for cluster NetworkMode高效创建容器-设置容器的网络模式。
    # NetworkMode支持的标准值为: 'host' (默认)，'bridge'，'ipvlan'，'none'。
    # Dns: 容器要使用的DNS服务器的列表。
    # 注意: 不支持Docker Host Config的 'privileged''binds''links' 和 'PortBindings' 属性，如果设置，则不会使用。
    # LogConfig-为Docker设置日志记录驱动程序 (类型) 和相关选项 (配置)。更多信息，
    # https://docs.docker.com/engine/admin/logging/overview/
    # 注意: 不支持使用环境变量设置LogConfig。
    hostConfig:
      # 设置容器的网络模式
      NetworkMode: host
      Dns:
      # - 192.168.0.1
      LogConfig:
        Type: json-file
        Config:
          max-size: "50m"
          max-file: "5"
      Memory: 2147483648

###############################################################################
#
#    Chaincode section
#
###############################################################################
chaincode:

  # The id is used by the Chaincode stub to register the executing Chaincode
  # ID with the Peer and is generally supplied through ENV variables
  # the `path` form of ID is provided when installing the chaincode.
  # The `name` is used for all other requests and can be any string.
  id:
    path:
    name:

  # docker images 镜像, 通用生成器环境，适用于大多数链码类型。
  builder: trusted-chain-gm/ccenv:2.4

  # 启用/禁用强制拉取基本docker镜像 (如下所列) 在用户链代码实例化期间。
  # 使用移动图像标签 (如: 最新) 时有用
  pull: false

  golang:
    # golang will never need more than baseos
    runtime: trusted-chain-gm/baseos:2.4

    # whether or not golang chaincode should be linked dynamically
    dynamicLink: false

  java:
    # This is an image based on java:openjdk-8 with addition compiler
    # tools added for java shim layer packaging.
    # This image is packed with shim layer libraries that are necessary
    # for Java chaincode runtime.
    runtime: $(DOCKER_NS)/fabric-javaenv:$(TWO_DIGIT_VERSION)

  node:
    # This is an image based on node:$(NODE_VER)-alpine
    runtime: $(DOCKER_NS)/fabric-nodeenv:$(TWO_DIGIT_VERSION)

  # 作为链码的外部构建器和启动器的目录列表。
  # 外部构建器检测处理将按照下面指定的顺序迭代构建器。
  # 如果您不需要回退到默认的Docker builder，也可以在上面取消/注释配置vm.endpoint。
  # 要通过env变量覆盖此属性，请使用
  # CORE_CHAINCODE_EXTERNALBUILDERS: [{name: x，path: dir1，propagateEnvironment: [xx，xx]}，{name: y，path: dir2}]
  externalBuilders:
    - name: ccaas_builder # 链码外部构建器的名称
      path: ./chaincode # 链码外部构建器的绝对路径
      propagateEnvironment: # 要传递给链码外部构建器的环境变量
        - CHAINCODE_ID
        - CHAINCODE_SERVER_ADDRESS



  # 等待chaincode构建和安装过程完成的最长持续时间。
  installTimeout: 30s

  # 启动容器并等待Register注册通过的超时持续时间。
  startuptimeout: 5s

  # Invoke和Init调用的超时持续时间，以防止失控。
  # 此超时由所有通道中的所有链码使用，包括系统链码。
  # 注意，在调用期间，如果映像不可用 (例如在开发环境中被清理)，
  # 对等方将自动构建映像，这可能需要更多时间。
  # 在生产环境中，链码图像不太可能被删除，因此可以相应地减少超时时间。
  executetimeout: 30s

  # 有两种模式: “dev” 和 “net”。
  # 在dev模式下，用户在本地机器上从命令行启动peer后运行链码。
  # 在net模式下，peer将在docker容器中运行chaincode。
  mode: dev

  # keepalive以秒为单位。在通信通过不支持keep-alive的代理，此参数将保持连接在peer和chaincode之间。
  # A值 <= 0关闭keepalive
  keepalive: 0

  # 启用系统链码
  system:
    _lifecycle: enable
    cscc: enable
    lscc: enable
    qscc: enable

  # 链码容器的日志部分
  logging:
    # chaincode容器中所有记录器的默认级别
    level:  info
    # 覆盖 'shim' 记录器的默认级别
    shim:   warning
    # 链码容器日志的格式
    format: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'

###############################################################################
#
#    Ledger section - ledger configuration encompasses both the blockchain
#    and the state
#
###############################################################################
ledger:

  blockchain:

  state:
    # 状态数据库 - 选项是 "goleveldb", "CouchDB"
    # goleveldb - 默认状态数据库存储在goleveldb中。
    # CouchDB - 在CouchDB中存储状态数据库
    stateDatabase: *ledgerdb
    # 限制每个查询返回的记录数
    totalQueryLimit: 100000
    couchDBConfig:
      # CouchDB 数据库实例的主机名和端口号
      # 建议在与对等方相同的服务器上运行CouchDB，
      # 并且不将CouchDB容器端口映射到docker-compose中的服务器端口。
      # 否则，必须在CouchDB客户端 (在对等方) 和服务器之间的连接上提供适当的安全性。
      couchDBAddress: *ledgerdbAddress
      # 此用户名必须在CouchDB上具有读写权限
      username: *ledgerdbusername
      # 建议在启动过程中将密码作为环境变量传递 (例如CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD)。
      # 如果存储在此处，则必须对文件进行访问控制保护，以防止意外用户发现密码。
      password: *ledgerdbpassword
      # CouchDB错误的重试次数
      maxRetries: 3
      # 对等启动期间CouchDB错误的重试次数。
      # 每次重试之间的延迟都会加倍。
      # 10次重试的默认值会导致在2分钟内进行11次尝试。
      maxRetriesOnStartup: 10
      # CouchDB请求超时 (单位: 持续时间，例如20s)
      requestTimeout: 35s
      # 在内部，链码可以执行多个CouchDB查询，查询CouchDB时内部返回的最大记录数。
      internalQueryLimit: 1000
      # CouchDB批量更新操作中包含的最大记录数。
      maxBatchUpdateSize: 1000
      # 创建_global_changes系统数据库
      # 这是可选的。创建全局更改数据库将需要额外的系统资源来跟踪更改和维护数据库
      createGlobalChangesDB: false
      # CacheSize表示要为内存状态缓存分配的最大百万字节 (MB)。
      #请注意，CacheSize必须是32 MB的倍数。如果不是32 MB的倍数，
      #对等方会将大小四舍五入为32 MB的下一倍。
      #要禁用缓存，需要为缓存大小分配0 MB。
      cacheSize: 64

  history:
    # enableHistoryDatabase - 选项为true或false
    # 指示是否应存储密钥更新的历史记录。
    # 所有历史 “索引” 将存储在goleveldb中，无论使用CouchDB还是备用数据库的状态。
    enableHistoryDatabase: true

  pvtdataStore:
    # 是将不符合条件的缺失数据条目转换为符合条件的条目时的最大批大小。
    collElgProcMaxDbBatchSize: 5000
    # 将不符合条件的缺失数据条目转换为符合条件的条目的批次之间的最小持续时间 (毫秒)。
    collElgProcDbBatchesInterval: 1000
    # 缺失的数据条目分为两类:
    # (1) 优先
    # (2) 降低优先级
    # 最初，所有丢失的数据都在优先级列表中。当调解器无法从其他对等端获取丢失的数据时，
    # 未协调的缺失数据将被移动到去优先级列表。
    # 调和器将在每次取消优先级后重试取消优先级的缺失数据datarepreconcilerinterval (单位: 分钟)。
    # 请注意，间隔需要大于 reconcileSleepInterval
    deprioritizedDataReconcilerInterval: 60m

    # 清除过期的专用数据条目之前要等待的块数。
    # purgeInterval:

  snapshots:
    # 对等方将存储分类账本快照的文件系统上的路径, 默认 peer.fileSystemPath/snapshots
    rootDir:

###############################################################################
#
#    Operations section, http请求的配置
#
###############################################################################
operations:
  # operations server的主机和端口
  listenAddress: *nodeListen

  # 操作端点的TLS配置
  tls:
    # TLS已启用
    enabled: false

    # 为operations server提供PEM编码的服务器证书的路径。
    cert:
      file:

    # 为operations server提供PEM编码的服务器密钥的路径。
    key:
      file:

    # 大多数操作服务端点在启用TLS时需要客户端身份验证。
    # clientAuthRequired需要TLS层的客户端证书认证才能访问所有资源。
    clientAuthRequired: false

    # 客户端身份验证信任的PEM编码ca证书的路径
    clientRootCAs:
      files: []

###############################################################################
#
#    Metrics section
#
###############################################################################
metrics:
  # 度量提供程序是statsd、prometheus或disabled之一
  provider: disabled

  # statsd配置
  statsd:
    # 指示statsd metrics使用的网络类型。(tcp或udp)。
    network: udp

    # statsd服务器地址
    address: 127.0.0.1:8125

    # 本地缓存的计数器和量规推送到statsd的时间间隔； 计时立即推送
    writeInterval: 10s

    # 前缀附加到所有发出的statsd度量
    prefix:
